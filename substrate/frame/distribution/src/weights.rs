
//! Autogenerated weights for `pallet_distribution`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-08-13, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Kazu-Rog`, CPU: `AMD Ryzen 9 4900HS with Radeon Graphics`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/substrate-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_distribution
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// substrate/frame/distribution/src/weights.rs
// --wasm-execution
// compiled
// --heap-pages
// 4096
// --template
// substrate/.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_distribution`.
pub trait WeightInfo {
	fn claim_reward_for() -> Weight;
}

/// Weights for `pallet_distribution` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Distribution::Spends` (r:51 w:50)
	/// Proof: `Distribution::Spends` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	/// Storage: `Distribution::Projects` (r:1 w:1)
	/// Proof: `Distribution::Projects` (`max_values`: Some(1), `max_size`: Some(2601), added: 3096, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:51 w:51)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	fn claim_reward_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10626`
		//  Estimated: `133743`
		// Minimum execution time: 40_027_989_000 picoseconds.
		Weight::from_parts(40_934_760_000, 133743)
			.saturating_add(T::DbWeight::get().reads(104_u64))
			.saturating_add(T::DbWeight::get().writes(103_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Distribution::Spends` (r:51 w:50)
	/// Proof: `Distribution::Spends` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	/// Storage: `Distribution::Projects` (r:1 w:1)
	/// Proof: `Distribution::Projects` (`max_values`: Some(1), `max_size`: Some(2601), added: 3096, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:51 w:51)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	fn claim_reward_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10626`
		//  Estimated: `133743`
		// Minimum execution time: 40_027_989_000 picoseconds.
		Weight::from_parts(40_934_760_000, 133743)
			.saturating_add(RocksDbWeight::get().reads(104_u64))
			.saturating_add(RocksDbWeight::get().writes(103_u64))
	}
}
